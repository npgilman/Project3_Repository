Purpose: find the most efficient combination of foods to meet a certain macro amount
Goal: We must compare and analyze the performance of two algs or structures used for the same purpose

Submission Comment:
"We don't advise you to implement two algorithms that we provided pseudocode for in class. 
Keep one of the algorithms you already have, and implement one that we haven't 
provided a solution for (Tim sort, Radix, Bucket sort, etc.)"

Big Problems:
1. Need an algorithm that we haven't covered in class
2. We need 100,000 vertices... We have 5,624 food and drink items
	We would need to auto generate the rest of the vertices...
	We cannot change our problem context. 
	
Solutions:
1. We can choose to do a comparison of two structures instead of two algs
	We can use an array/vector and use mergesort or quicksort
	Or pancake sort (will have to do more research)
	The overall method below should stay similar
	I am unsure if we can compare the algs of different structures
	(Kruskals vs Pancake for example)
2. We can use a map of vectors. The key would be the amount of the primary macro of the food 
	When we need a macro of a certain amount, we check at the map at map[protein 10]
	This would take a lot of space, but would be O(1) access for unordered map
	Our comparison would then be between Graph and Map.
	

Method:
1. Use the input amount to determine the weights of each macro
2. Use the weights to choose which macro to prioritize
3. Find the most efficient food item for the prioritized macro
	Either by finding the food item with the max amount of the macro
	Or by calculating the food with the most similar weights to the needed macros
	Example: For needed macros: (40, 40, 20) Find the food that matches this distribution
4. Rrecalculate weight depending on remaining amounts 


Inputs:
1. Calories
2. Macro: Protein, Carbs, Fats
3. Maybe: Maximum or minimum amounts of food to reach goal
4. Maybe: Include making food calculation account for micronutrients (based on FDA daily minimums)
	This would make selecting the most efficient food a bit trickier.
	We can prioritize finding macros first to a certain percent, then introduce the needed foods for micros


Outputs:
1. List of foods and their nutrition facts
2. Total nutritional value of outputted foods
3. Maybe: Next to a table of FDA minimum daily needs for comparison

GUI:
1. Input boxes
2. Start/Begin boxes for either algorithm
3. 

Algorithms:
1. Kruskal's
	Order all edges by most needed macro
	Add the most efficient - either highest amount of that macro, or best split of macros
	Based on the recently added, calculate next most needed macro

2. Map
	After inserting all items in map based on macro
	Search map for macro
	Add macro's nutrition info
	Search map for next macro
	We would need to round our values. Map[protein 10] could hold foods with 10-20g protein
	We would then need to pick an item from inside the Map[protein 10] vector.
	We could sort that vector itself based on max protein
	
	
Need to find an algorithm not shown in class to perform the same function


